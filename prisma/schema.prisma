// This is your Prisma schema file for storing SEO metrics over time

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model DailyMetric {
  id          String   @id @default(cuid())
  siteId      String   // Which site this metric belongs to
  site        Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)
  date        DateTime
  clicks      Int
  impressions Int
  ctr         Float
  position    Float
  createdAt   DateTime @default(now())
  
  @@unique([siteId, date])
  @@index([siteId])
  @@index([date])
}

model PageMetric {
  id          String   @id @default(cuid())
  siteId      String   // Which site this metric belongs to
  site        Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)
  date        DateTime
  page        String
  clicks      Int
  impressions Int
  ctr         Float
  position    Float
  createdAt   DateTime @default(now())
  
  @@unique([siteId, date, page])
  @@index([siteId])
  @@index([date])
  @@index([page])
}

model QueryMetric {
  id          String   @id @default(cuid())
  siteId      String   // Which site this metric belongs to
  site        Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)
  date        DateTime
  query       String
  clicks      Int
  impressions Int
  ctr         Float
  position    Float
  createdAt   DateTime @default(now())
  
  @@unique([siteId, date, query])
  @@index([siteId])
  @@index([date])
  @@index([query])
}

model WeeklyReport {
  id                String   @id @default(cuid())
  siteId             String   // Which site this report belongs to
  site               Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)
  weekStartDate      DateTime
  weekEndDate        DateTime
  totalClicks        Int
  totalImpressions   Int
  averageCtr         Float
  averagePosition    Float
  clicksChange       Float
  impressionsChange  Float
  ctrChange          Float
  positionChange     Float
  insights           String
  topPages           String
  topQueries         String
  recommendations    String
  sentAt             DateTime?
  createdAt          DateTime @default(now())
  
  @@unique([siteId, weekStartDate, weekEndDate])
  @@index([siteId])
  @@index([weekStartDate])
}

model Site {
  id            String   @id @default(cuid())
  domain        String   @unique // e.g., "www.stuchai.com"
  displayName   String   // e.g., "Stuchai"
  googleSiteUrl String   // Full URL for Google Search Console: "https://www.stuchai.com"
  ownerId       String   // Primary owner/client user ID
  owner         User     @relation("SiteOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  clientSites   ClientSite[]
  dailyMetrics  DailyMetric[]
  pageMetrics   PageMetric[]
  queryMetrics  QueryMetric[]
  reports       WeeklyReport[]
  
  @@index([ownerId])
  @@index([domain])
}

model ClientSite {
  id        String   @id @default(cuid())
  userId    String   // Client user ID
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  siteId    String   // Site ID
  site      Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  
  @@unique([userId, siteId])
  @@index([userId])
  @@index([siteId])
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  passwordHash  String
  name          String
  role          Role     @default(CLIENT)
  isActive      Boolean  @default(true)
  // Client profile fields
  businessName  String?
  logoUrl       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  sessions      Session[]
  tasks         Task[]
  ownedSites    Site[]   @relation("SiteOwner") // Sites owned by this user
  clientSites   ClientSite[] // Sites this user has access to
  
  @@index([email])
  @@index([role])
}

enum Role {
  ADMIN
  EMPLOYEE
  CLIENT
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([token])
  @@index([expiresAt])
}

model ApiUsage {
  id            String   @id @default(cuid())
  apiType       String   // 'GOOGLE' or 'OPENAI'
  endpoint      String
  tokensUsed    Int?     // For OpenAI
  costEstimate  Float?   // Estimated cost in USD
  success       Boolean
  errorMessage  String?
  createdAt     DateTime @default(now())
  
  @@index([apiType])
  @@index([createdAt])
}

model LoginLog {
  id        String   @id @default(cuid())
  userId    String
  email     String
  success   Boolean
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  
  @@index([userId])
  @@index([email])
  @@index([createdAt])
}

model ScheduleConfig {
  id                String   @id @default(cuid())
  jobType           String   @unique // 'DATA_COLLECTION' or 'REPORT_GENERATION'
  cronExpression    String
  isEnabled         Boolean  @default(true)
  lastRun           DateTime?
  nextRun           DateTime?
  updatedAt         DateTime @updatedAt
  createdAt         DateTime @default(now())
}

model Task {
  id          String   @id @default(cuid())
  userId      String   // Which client this task is for
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String   @db.Text
  priority    TaskPriority @default(MEDIUM)
  status      TaskStatus   @default(PENDING)
  dueDate     DateTime
  weekStartDate DateTime // Week this task belongs to
  weekEndDate   DateTime
  completedAt  DateTime?
  assignedTo   String? // Admin/Employee who created/assigned the task
  isAiGenerated Boolean @default(false) // True if generated by AI analysis
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([userId])
  @@index([status])
  @@index([dueDate])
  @@index([weekStartDate])
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

